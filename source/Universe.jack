class Universe {

    field Array gridA;
    field Array gridB;
    field Array currentGrid;
    field Cell currentCell;
    field Array neighbors;
    field int width, height;
    field int size, neighborSize;
    field int DEAD, ALIVE;

    constructor Universe new(int w, int h) {
        let DEAD = 0;
        let ALIVE = 1;
        let width = w;
        let height = h;
        let currentCell = Cell.new();
        let gridA = initGrid(w * h);
        let gridB = initGrid(w * h);
        do Generator.seedTwo(gridA, width, height);
        let currentGrid = gridA;
        return this;
    }

    method void next() {
        var Array grid, nextGrid;
        var int i;
        let i = 0;

        if (currentGrid = gridA) {
            let grid = gridA;
            let nextGrid = gridB;
        } else {
            let grid = gridB;
            let nextGrid = gridA;
        }

        while (i < size) {
            do updateWorld(i, grid, nextGrid);
            let i = i + 1;
        }

        // Switch grids
        if (currentGrid = gridA) {
            let currentGrid = gridB;
        } else {
            let currentGrid = gridA;
        }

        return;
    }

    method void updateWorld(int i, Array grid, Array nextGrid) {

        var int tl, t, tr, l, r, bl, b, br;
        var int aliveNeighborCount;
    
        let t = bounds(i - width);
        let tl = bounds(t - 1);
        let tr = bounds(t + 1);
        let l = bounds(i - 1);
        let r = bounds(i + 1);
        let b = bounds(i + width);
        let bl = bounds(b - 1);
        let br = bounds(b + 1);

        do currentCell.update(grid[i]);

        let aliveNeighborCount = grid[tl] + grid[t] + grid[tr] + grid[l] + grid[r] + grid[bl] + grid[b] + grid[br];

        let nextGrid[i] = currentCell.next(aliveNeighborCount);

        return;
    }

    method int bounds(int i) {
        if (i < 0)          { return size - i; }
        if (i > (size - 1)) { return i - size; }
        return i;
    }

    method Array initGrid(int gridSize) {
        var Array grid;
        var int i;

        let size = gridSize;
        let i = 0;
        let grid = Array.new(size);

        while (i < size) {
            let grid[i] = DEAD;
            let i = i + 1;
        }
        return grid;
    }

    method int getSize() {
        return size;
    }

    method Array getGrid() {
        return currentGrid;        
    }

    method void dispose() {
        do currentCell.dispose();
        do gridA.dispose();
        do gridB.dispose();
        do Memory.deAlloc(this);
        return;
    }
}